import multer from 'multer';
import { Router } from 'express';
import HttpErrors from 'http-errors';
import bearerAuthMiddleware from '../lib/middleware/bearer-auth-middleware';
import Image from '../model/image';
import { s3Upload, s3Remove } from '../lib/s3';
import logger from '../lib/logger';

// multer is what we use to send files (multipart form data) over HTTP. It will attach a ".files" property to our request object witih metadata about the file we wish to send
const multerUpload = multer({ dest: `${__dirname}/../temp` });

const imageRouter = new Router();

imageRouter.post('/api/images', bearerAuthMiddleware, multerUpload.any(), (request, response, next) => {
  if (!request.account) return next(new HttpErrors(401, 'IMAGE ROUTER POST ERROR: not authorized'));

  // the files property is an array
  // checking for request.files.length > 1 is only a setting for this lecture code. You are able to attach multiple files at one time and multer collects those files as an array, where request.files would be an array of your attached files. 
  if (!request.body.title || request.files.length > 1) {
    return next(new HttpErrors(400, 'IMAGE ROUTER POST ERROR: invalid request'));
  }

  // request.files is an array with only one item in it
  // same as const file = requuest.files[0];
  const [file] = request.files;
  // these are properties on the "file" we extracted above. Console.log here to see how it looks
  logger.log(logger.INFO, `IMAGE ROUTER POST: valid file ready to to upload: ${JSON.stringify(file, null, 2)}`);
  // .filename property is a unique hash generated by multer
  const key = `${file.filename}.${file.originalname}`;
  return s3Upload(file.path, key)
    .then((url) => {
      logger.log(logger.INFO, `IMAGE ROUTER POST: received a valid URL from Amazon S3: ${url}`);
      // remember, we are returning S3's generated URL after successful upload of our file to the bucket
      return new Image({
        title: request.body.title,
        accountId: request.account._id,
        fileName: key,
        url,
      }).save();
    })
    .then((newImage) => {
      logger.log(logger.INFO, `IMAGE ROUTER POST: new image created: ${JSON.stringify(newImage, null, 2)}`);
      return response.json(newImage);
    })
    .catch(next); 
});

imageRouter.get('/api/images/:id?', bearerAuthMiddleware, (request, response, next) => {
  if (!request.account) return next(new HttpErrors(401), 'IMAGE ROUTER GET: invalid request');
  if (!request.params.id) return next(new HttpErrors(400, 'IMAGE ROUTER GET: no id provided'));

  // findById is NOT a method that works in a pre/post hook, so choose queries wisely if you intend to use those hooks in project week
  return Image.findById(request.params.id)
    .then((image) => {
      if (!image) return next(new HttpErrors(404, 'IMAGE ROUTER GET: no image found in database'));
      logger.log(logger.INFO, `IMAGE ROUTER GET: successfully found image ${JSON.stringify(image, null, 2)}`);
      return response.json(image);
    })
    .catch(next);
});

// TODO: write a coverRouter.delete here
imageRouter.delete('/api/images/:id?', bearerAuthMiddleware, (request, response, next) => {
  if (!request.account) return next(new HttpErrors(401), 'IMAGE ROUTER DELETE: invalid request');
  if (!request.params.id) return next(new HttpErrors(400, 'IMAGE ROUTER DELETE: no id provided'));

  // findById is NOT a method that works in a pre/post hook, so choose queries wisely if you intend to use those hooks in project week
  return Image.findById(request.params.id)
    .then((image) => {
      if (!image) return next(new HttpErrors(404, 'IMAGE ROUTER DELETE: image not found in database'));
      const key = image.fileName;
      return s3Remove(key);
    })
    .then((result) => {
      logger.log(logger.INFO, `IMAGE ROUTER DELETE: successfully deleted book cover ${JSON.stringify(result, null, 2)}`);
      return response.json(result);
    })    
    .catch(next);
});

export default imageRouter;

